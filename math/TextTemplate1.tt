<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Runtime.InteropServices" #>

<#

#>

<#
	string[] names = new[]
	{
		"float",
		//"fixed",
		//"half"
	};

	string[] fields = new[]
	{
		"x", "y", "z", "w"
	};

	string[] colFields = new[]
	{
		"r", "g", "b", "a"
	};

	string[] operators = new[]
	{
		"+", "-", "*", "/", "%"
	};

	WriteLine("using System;");
	WriteLine("using System.Runtime.InteropServices;");
	WriteLine("namespace Shader.Vectors{");
	
	Dictionary<int, List<(string name, string args, string sets, int[])>> swizDict = new ();

	List<(string name, string args, string sets, int[])> GetSwizz(int n)
	{
		if (swizDict.TryGetValue(n, out var res)) return res;

			var swizzles = new List<(string name, string args, string sets, int[])>();
			swizDict[n] = swizzles;

			var hashSet = new HashSet<(int,int)>();
			for (int x = 0; x < n; x++)
			for (int y = 0; y < n; y++)
			{
				if(hashSet.Contains((x,y))) continue;
				hashSet.Add((x,y));
				
				if(x==0 && y==1) continue;

				var name = fields[x] + fields[y];
				var args = fields[x] + "," + fields[y];
				var sets = "this." + fields[x] + "= value.x;";
				sets += "this." + fields[y] + "= value.y;";

				swizzles.Add(
					(name,
						args,
						sets,
						new []{x,y})
					);
			}

			var hashSet2 = new HashSet<(int,int,int)>();
			for (int x = 0; x < n; x++)
				for (int y = 0; y < n; y++)
					for (int z = 0; z < n; z++)
				{
					if(hashSet2.Contains((x,y,z))) continue;
					hashSet2.Add((x,y,z));

					if(x==0 && y==1 && z==2) continue; 

					var name = new StringBuilder();
					name.Append(fields[x]);
					name.Append(fields[y]);
					name.Append(fields[z]);
					
					var args = new StringBuilder();
					args.Append(fields[x]);
					args.Append(',');
					args.Append(fields[y]);
					args.Append(',');
					args.Append(fields[z]);

					var sets = new StringBuilder();
					sets.Append(fields[x]);
					sets.Append("= value.x;");
					sets.Append(fields[y]);
					sets.Append("= value.y;");
					sets.Append(fields[z]);
					sets.Append("= value.z;");

					swizzles.Add(
							(name.ToString(),
							args.ToString(),
							sets.ToString(),
							new []{x,y,z})
						);
				}

				//============
				var hashSet3 = new HashSet<(int,int,int, int)>();
				
				for (int x = 0; x < n; x++)
				for (int y = 0; y < n; y++)
				for (int z = 0; z < n; z++)
				for (int w = 0; w < n; w++)
				{
					if(hashSet3.Contains((x,y,z,w))) continue;
					hashSet3.Add((x,y,z,w));

					if(x==0 && y==1 && z==2 && w == 3) continue; 

					var name = new StringBuilder();
					name.Append(fields[x]);
					name.Append(fields[y]);
					name.Append(fields[z]);
					name.Append(fields[w]);
					
					var args = new StringBuilder();
					args.Append(fields[x]);
					args.Append(',');
					args.Append(fields[y]);
					args.Append(',');
					args.Append(fields[z]);
					args.Append(',');
					args.Append(fields[w]);

					var sets = new StringBuilder();
					sets.Append(fields[x]);
					sets.Append("= value.x;");
					sets.Append(fields[y]);
					sets.Append("= value.y;");
					sets.Append(fields[z]);
					sets.Append("= value.z;");
					sets.Append(fields[w]);
					sets.Append("= value.w;");

					swizzles.Add(
							(name.ToString(),
							args.ToString(),
							sets.ToString(),
							new []{x,y,z,w})
						);
				}

				//=========
			return swizzles;
	};

	foreach (var name in names)
	{
		for (int n = 2; n <= 4; n++)
		{
			
			var vecName = name + n;

			WriteLine("[StructLayout(LayoutKind.Explicit)]");
			WriteLine($"public struct  {vecName}");
			WriteLine("{");

			for (int i = 0; i < n; i++)
			{
				WriteLine($"[FieldOffset({4*i})] public float {fields[i]};");	
			}

			for (int i = 0; i < n; i++)
			{
				WriteLine($"[FieldOffset({4*i})] public float {colFields[i]};");
			}

			void InitDefault()
			{
				for (int maxF = 2; maxF < n; maxF++)
				{
					var argName = "";
					for (int i = 0; i < maxF; i++)
					{
						argName += fields[i];
					}

					WriteLine($"this.{argName} = default;");
				}

				for (int maxF = 2; maxF < n; maxF++)
				{
					var argName = "";
					for (int i = 0; i < maxF; i++)
					{
						argName += colFields[i];
					}

					WriteLine($"this.{argName} = default;");
				}

				for (int i = 0; i < n; i++)
				{
					WriteLine($"this.{colFields[i]} = default;");
				}

				WriteLine("");
			}

			var ctor = "public " + vecName + "(";

			for (int i = 0; i < n; i++)
			{
				ctor += "float " + fields[i];
				if (i < n - 1) ctor += ",";
			}

			ctor += ")";
			WriteLine(ctor);
			WriteLine("{");

			InitDefault();
			for (int i = 0; i < n; i++)
			{
				WriteLine($"this.{fields[i]} = {fields[i]};");
			}
			WriteLine("}");

			if (n > 2)
			{
				var argName = "";
				for (int i = 0; i < n - 1; i++)
				{
					argName += fields[i];
				}

				WriteLine($"public {vecName}({name + (n - 1)} {argName}, float {fields[n-1]})");
				WriteLine("{");
				InitDefault();


				for (int i = 0; i < n-1; i++)
				{
					WriteLine($"this.{fields[i]} = {argName}.{fields[i]};");
				}
				WriteLine($"this.{fields[n-1]} = {fields[n-1]};");
				WriteLine("}");

			}

			
				for (int maxF = 2; maxF <= n; maxF++)
				{
					var argName = "";
					for (int i = 0; i < maxF; i++)
					{
						argName += fields[i];
					}

					var colArgName = "";
					for (int i = 0; i < maxF; i++)
					{
						colArgName += colFields[i];
					}
					
					if (name + maxF == vecName)
					{
						WriteLine($"public {name + maxF} {argName} {{ get => this; set{{ }}}}");
					}
					else
					{
						WriteLine("[FieldOffset(0)]"); 
						WriteLine($"public {name + maxF} {argName};");

						WriteLine("[FieldOffset(0)]"); 
						WriteLine($"public {name + maxF} {colArgName};");
					}
				}
				

				var swizzles = GetSwizz(n);

				foreach (var swiz in swizzles)
				{
					var typeName = name + swiz.Item4.Length;
					WriteLine($"public {typeName} {swiz.name} {{get => new {typeName}({swiz.args});set{{{swiz.sets}}}}}");
				}

				//========
			foreach (var oper in operators)
			{

				//Scalar
				WriteLine($"public static {vecName} operator {oper}({vecName} vector, float scalar)");
				WriteLine("{");
				WriteLine($"return new {vecName}(");

				for (int i = 0; i < n; i++)
				{
					var comma = (i < n - 1) ? "," : "";
					WriteLine($"vector.{fields[i]} {oper} scalar" + comma);
				}

				WriteLine(");");
				WriteLine("}");

				//back Scalar

				WriteLine($"public static {vecName} operator {oper}(float scalar, {vecName} vector) => vector {oper} scalar;");

				//vector
				WriteLine($"public static {vecName} operator {oper}({vecName} vector, {vecName} scalar)");
				WriteLine("{");
				WriteLine($"return new {vecName}(");

				for (int i = 0; i < n; i++)
				{
					var comma = (i < n - 1) ? "," : "";
					WriteLine($"vector.{fields[i]} {oper} scalar.{fields[i]}" + comma);
				}

				WriteLine(");");
				WriteLine("}");

				foreach (var name1 in names)
				{
					if(name == name1) continue;
					WriteLine($"public static {vecName} operator {oper}({vecName} vector, {name1+n} scalar) {{ return default;}}");
				}
			}

			//unary negation
			{
				WriteLine($"public static {vecName} operator -({vecName} vector)");
				WriteLine("{");
				WriteLine($"return new {vecName}(");
				for (int i = 0; i < n; i++)
				{
					
					Write($"-vector.{fields[i]}");
					if(i<n-1) Write(",");
					WriteLine("");
				}
				WriteLine(");");
				WriteLine("}");
			}

			for (int m = 2; m < n; m++)
			{
				WriteLine($"public static implicit operator {name + m}({vecName} v) {{ throw new NotImplementedException(); }}");
			}

			foreach (var name1 in names)
			{
				if(name1 == name) continue;
				//if(Array.IndexOf(names,name1)>Array.IndexOf(names, name)) continue;

				WriteLine($"public static implicit operator {name1 + n}({vecName} v) {{ throw new NotImplementedException(); }}");
			}

			WriteLine($"public static implicit operator {vecName}(float v) {{ throw new NotImplementedException(); }}");

			WriteLine("}");
		}
	}

	WriteLine("}");

#>	