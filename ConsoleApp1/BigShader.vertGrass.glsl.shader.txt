attribute vec3 vertex;
attribute vec4 uv;
attribute fixed3 normal;
attribute fixed3 normal2;
attribute fixed4 color;
attribute fixed4 color2;
attribute VERTEX_INPUT_INSTANCE_ID UNITY_VERTEX_INPUT_INSTANCE_ID;

uniform ShaderFeature _SMOOTH_FADE;
uniform float _Wind;
uniform float _DistMin;
uniform float _DistMax;

varying fixed4 color;
varying fixed3 normal;
varying vec3 worldPos;
varying VERTEX_INPUT_INSTANCE_ID UNITY_VERTEX_INPUT_INSTANCE_ID;
varying VERTEX_OUTPUT_STEREO UNITY_VERTEX_OUTPUT_STEREO;
varying FOG_COORDS UNITY_FOG_COORDS;

main(){
	UGlobal.SETUP_INSTANCE_ID(UNITY_VERTEX_INPUT_INSTANCE_ID);
	UGlobal.TRANSFER_INSTANCE_ID(UNITY_VERTEX_INPUT_INSTANCE_ID, UNITY_VERTEX_INPUT_INSTANCE_ID);
	UGlobal.INITIALIZE_VERTEX_OUTPUT_STEREO(UNITY_VERTEX_OUTPUT_STEREO);
	vec3 l1_worldPos = mul(ObjectToWorld, float4(vertex.xyz, 1.0));
	vec3 l2_normal = ObjectToWorldNormal(normal);
	float t = 0.0;
	if (_SMOOTH_FADE) {
		t = (distance(mul(ObjectToWorld, float4(0.0, 0.0, 0.0, 1.0)), _WorldSpaceCameraPos.xyz) - _DistMin) / (_DistMax - _DistMin);
		t = saturate(t);
		l1_worldPos = mix(l1_worldPos, mul(ObjectToWorld, float4(uv.xyz, 1.0)), t);
		l2_normal = mix(l2_normal, ObjectToWorldNormal(normal2), t);
	}
	normal = l2_normal;
	float intensOr = 1.0 - color.a;
	float intens = intensOr;
	float val = mix(0.0, 0.5, _Wind);
	float _Wavelength = 3.3;
	float _Speed = 15.0;
	float _Amplitude = 0.2;
	intens = intens * val;
	_Speed = _Speed * val;
	float windForce = 0.5 + sin(0.8 * _Time.y);
	vec4 wave = float4(0.3, -0.2, 0.3, 0.0) * windForce;
	float tShift = saturate(windForce - 0.8) * 0.0;
	vec3 p = l1_worldPos;
	float k = (2 * PI) / _Wavelength;
	float f = k * (p.x - (_Speed * (_Time.y + (uv.w * tShift))));
	sincos(f, sr, cr);
	p.x = p.x + ((_Amplitude * cr) * intens);
	p.y = p.y + ((_Amplitude * sr) * intens);
	p = p + ((((wave.xyz * intensOr) * 1.3) / 0.4) * val);
	l1_worldPos = p;
	worldPos = l1_worldPos;
	gl_Position = mul(MATRIX_VP, float4(l1_worldPos.xyz, 1.0));
	if (!_SMOOTH_FADE ) {
		color = color;
	} else {
		color = mix(color, color2, t);
	}
	UGlobal.TRANSFER_FOG(UNITY_FOG_COORDS, gl_Position);
	return;//gl_Position is set

}
/*___unresolved_____

_____________*/
