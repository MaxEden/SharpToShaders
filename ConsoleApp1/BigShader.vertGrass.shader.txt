vertGrass(){
v2fGrass o;
float3 worldPos;
float3 normal;
float t;
float intensOr;
float intens;
float val;
float _Wavelength;
float _Speed;
float _Amplitude;
float windForce;
float4 wave;
float tShift;
float3 p;
float k;
float f;
float sr;
float cr;
UNITY_SETUP_INSTANCE_ID(v.UNITY_VERTEX_INPUT_INSTANCE_ID);
UNITY_TRANSFER_INSTANCE_ID(v.UNITY_VERTEX_INPUT_INSTANCE_ID, o.UNITY_VERTEX_INPUT_INSTANCE_ID);
UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o.UNITY_VERTEX_OUTPUT_STEREO);
worldPos = mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1.0));
normal = UnityObjectToWorldNormal(v.normal);
t = 0.0;
if (_SMOOTH_FADE) {
	t = distance(mul(unity_ObjectToWorld, float4(0.0, 0.0, 0.0, 1.0)), _WorldSpaceCameraPos.xyz) - _DistMin / _DistMax - _DistMin;
	t = saturate(t);
	worldPos = lerp(worldPos, mul(unity_ObjectToWorld, float4(v.uv.xyz, 1.0)), t);
	normal = lerp(normal, UnityObjectToWorldNormal(v.normal2), t);
}
o.normal = normal;
intensOr = 1.0 - v.color.a;
intens = intensOr;
val = lerp(0.0, 0.5, _Wind);
_Wavelength = 3.3;
_Speed = 15.0;
_Amplitude = 0.2;
intens = intens * val;
_Speed = _Speed * val;
windForce = 0.5 + sin(0.8 * _Time.y);
wave = float4(0.3, -0.2, 0.3, 0.0) * windForce;
tShift = saturate(windForce - 0.8) * 0.0;
p = worldPos;
k = 2 * UNITY_PI / _Wavelength;
f = k * p.x - _Speed * _Time.y + v.uv.w * tShift;
sincos(f, sr, cr);
p.x = p.x + _Amplitude * cr * intens;
p.y = p.y + _Amplitude * sr * intens;
p = p + wave.xyz * intensOr * 1.3 / 0.4 * val;
worldPos = p;
o.worldPos = worldPos;
o.vertex = mul(UNITY_MATRIX_VP, float4(worldPos.xyz, 1.0));
if (!(_SMOOTH_FADE) ) {
	o.color = v.color;
} else {
	o.color = lerp(v.color, v.color2, t);
}
UNITY_TRANSFER_FOG(o.UNITY_FOG_COORDS, o.vertex);
return o;

}
/*___unresolved_____

_____________*/
